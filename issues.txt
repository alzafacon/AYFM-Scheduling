#I know there's a better way to track issues...

Relational objects not mapped completly into java objects

Schedule Generator:
	Genders are not being matched
	assignments not being counted
	advancing progression is to decoupled.
	-type:2, sec:a, role:1
	>type:3, sec:b, role:2
	>type:4, sec:a, role:1
	>type:1, sec:b, role:2
	>type:2, sec:a, role:1

	what is more important? getting the exact progression 
	--or going sooner when no participation has happened in the longest?
	#causes same person to be assigned on the same week,
	##because coincidenalyy land on same week on different runs

	Why is marcelo and I as READERS causing null pointer exceptions on progression (.getHouseholder)???

Separate the DataAccess project from the AssignmentPlanner

==============================================
Creating and maintaining the code responsible for implementing the object-relational mapping can be difficult. 
There tends to be a great deal of code supporting ORM. 
The ORM code is tightly coupled to the database schema.

The Data Access Object design pattern describes a class whose responsibility is to encapsulate a class’s ORM code. 
There is a DAO defined for every persistent entity class. 
The Customer entity is maintained by the class CustomerDAO. 

A DAO provides all the operations needed to CRUD instances of its entity class including specialized Selects. 


Data-Tier Services may not be needed. Since their primary purpose is to make transactions. The operation needed is simple so the service layer may not be necessary and direct access to the DAO is allowed.
Data-Tier is requiered when several DAOs are used to create ('assemble') an entity.

